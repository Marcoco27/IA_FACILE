function promptApp() {
    return {
        // App state
        activeSection: 'explorer',
        mobileMenuOpen: false,
        isModalOpen: false,
        isIdeaModalOpen: false,
        isLoading: false,
        apiError: '',

        // Data is now embedded directly to prevent loading errors
        prompts: [
            { "id": 1, "category": "Cr√©ation de Contenu / SEO", "title": "G√©n√©rateur d'article SEO", "objective": "G√©n√©rer un article de blog complet, structur√© et optimis√© pour le SEO.", "text": "Agis comme un expert SEO et r√©dacteur web sp√©cialis√© dans [votre secteur]. Cr√©e un article de blog de 1500 mots sur [sujet] qui cible le mot-cl√© principal [mot-cl√©]. Structure l'article avec une introduction accrocheuse, 5 sous-parties H2 avec H3 si n√©cessaire, et une conclusion avec call-to-action. Inclus des statistiques r√©centes, des exemples concrets, et optimise le contenu pour le r√©f√©rencement tout en gardant un style conversationnel et engageant.", "techniques": ["R√¥le Prompting", "Instructions Sp√©cifiques"] },
            { "id": 2, "category": "Cr√©ation de Contenu / SEO", "title": "Article de R√©f√©rence (10x)", "objective": "G√©n√©rer un article de r√©f√©rence qui surpasse la concurrence en profondeur et en qualit√©.", "text": "Le but est de cr√©er un contenu 10 fois mieux que vos concurrents sur le sujet [sujet de l'article]. G√©n√®re un article in√©gal√©, riche en donn√©es chiffr√©es et √©tay√© par des √©tudes r√©centes, en t'appuyant sur les derniers mod√®les comme ChatGPT ou Claude.", "techniques": ["Instructions Sp√©cifiques", "Objectif Qualitatif"] },
            { "id": 3, "category": "Cr√©ation de Contenu / Script Vid√©o", "title": "Script Vid√©o Engageant", "objective": "G√©n√©rer un script structur√© et engageant pour un contenu audiovisuel.", "text": "Cr√©e un script de [dur√©e] minutes sur le sujet [sujet]. Le public cible est [description de l'audience]. Structure le script avec: une introduction accrocheuse (30 secondes), 3-4 points principaux d√©velopp√©s avec des exemples et des histoires, et une conclusion avec un appel √† l'action clair. Ton: [conversationnel/√©ducatif/inspirant].", "techniques": ["R√¥le Prompting", "Formatage de Sortie"] },
            { "id": 4, "category": "Marketing / Emailing", "title": "Email Marketing AIDA", "objective": "R√©diger un email marketing √† fort taux de conversion en utilisant le mod√®le AIDA.", "text": "Cr√©e un email marketing de [nombre] mots pour [objectif: vente/inscription/t√©l√©chargement] destin√© √† [audience cible]. L'email doit suivre la structure AIDA (Attention, Int√©r√™t, D√©sir, Action), avoir un objet accrocheur de moins de 50 caract√®res, et inclure 3 points de douleur majeurs de cette audience. Termine par un CTA puissant et personnalis√©. Ton: [professionnel/amical/urgent].", "techniques": ["R√¥le Prompting", "Formatage de Sortie (AIDA)"] },
            { "id": 5, "category": "Business / Strat√©gie", "title": "Analyse SWOT", "objective": "Effectuer une analyse strat√©gique SWOT pour un projet ou une entreprise.", "text": "Cr√©er une analyse SWOT pour mon id√©e d'entreprise dans le secteur [secteur]. Identifiez les Forces, Faiblesses, Opportunit√©s et Menaces.", "techniques": ["T√¢che Sp√©cifique", "Formatage de Sortie"] },
            { "id": 6, "category": "Programmation / G√©n√©ration de Code", "title": "G√©n√©rateur de Fonction", "objective": "G√©n√©rer une fonction de code compl√®te et bien structur√©e dans un langage sp√©cifique.", "text": "Generate a [language] function named \"[function name]\" that: Accepts the following parameters: \"[parameter name 1 (type)]\", \"[parameter name 2 (type)]\". Performs the following logic: \"[describe detailed logic and purpose]\". Returns \"[return type and description of what it returns]\".", "techniques": ["Formatage Structur√©", "Instructions Sp√©cifiques"] },
            { "id": 7, "category": "Programmation / D√©bogage", "title": "D√©bogueur de Code", "objective": "Identifier et corriger des erreurs dans un bloc de code.", "text": "Agis comme un d√©bogueur exp√©riment√©. J'ai √©crit ce code en [langage] : [votre code]. Il devrait [comportement attendu] mais au lieu de cela, j'obtiens [erreur ou comportement incorrect]. Analyse mon code ligne par ligne, identifie les potentielles sources d'erreur, et sugg√®re des corrections pr√©cises.", "techniques": ["R√¥le Prompting", "Analyse de Code"] },
            { "id": 8, "category": "Raisonnement Logique / Math√©matique", "title": "R√©solution √âtape par √âtape", "objective": "R√©soudre un probl√®me math√©matique en for√ßant une d√©composition logique.", "text": "Je suis all√© au march√© et j'ai achet√© 10 pommes. J'ai donn√© 2 pommes au voisin et 2 au d√©panneur. Je suis ensuite all√© acheter 5 pommes de plus et j'en ai mang√© 1. Avec combien de pommes suis-je rest√©? R√©fl√©chissons √©tape par √©tape.", "techniques": ["Zero-Shot Chain-of-Thought"] },
            { "id": 9, "category": "Raisonnement Logique / Classification", "title": "Classification par l'Exemple", "objective": "R√©soudre un probl√®me logique complexe en montrant un exemple de raisonnement.", "text": "La somme des nombres impairs de ce groupe donne un nombre pair : 4, 8, 9, 15, 12, 2, 1. R : L'addition de tous les nombres impairs (9, 15, 1) donne 25. La r√©ponse est Faux.\n\nLa somme des nombres impairs de ce groupe donne un nombre pair : 15, 32, 5, 13, 82, 7, 1. R :", "techniques": ["Few-Shot Chain-of-Thought"] },
            { "id": 10, "category": "Cr√©ativit√© / Brainstorming", "title": "Sc√©nario \"Et si?\"", "objective": "Stimuler la pens√©e cr√©ative et l'exploration d'id√©es non conventionnelles.", "text": "Explore des sc√©narios \"what if?\". Et si l'argent n'existait pas dans le monde d'aujourd'hui? Comment les √©conomies fonctionneraient-elles?", "techniques": ["Question Ouverte", "Sc√©nario Hypoth√©tique"] },
            { "id": 11, "category": "Usage Personnel / Jeux", "title": "Jeu d'Aventure Textuel", "objective": "Cr√©er une exp√©rience de jeu de r√¥le textuelle et interactive.", "text": "Vous √™tes un jeu vid√©o textuel dans lequel vous me donnez des options (A, B, C, D) comme choix. Le sc√©nario est [description du sc√©nario]. Commencez.", "techniques": ["R√¥le Prompting", "Jeu Interactif"] }
        ],
        techniques: [
            { "name": "Zero-Shot Prompting", "subtitle": "Demande directe sans exemple", "description": "C'est la forme la plus simple de prompting. On demande directement au mod√®le de r√©aliser une t√¢che, en supposant qu'il a d√©j√† les connaissances n√©cessaires pour le faire. Id√©al pour les t√¢ches simples et g√©n√©rales.", "example": "Traduisez le texte suivant en anglais : \"Le prompt engineering est une discipline fascinante.\"" },
            { "name": "Few-Shot Prompting", "subtitle": "Guider avec quelques exemples", "description": "Une technique tr√®s puissante qui consiste √† fournir plusieurs exemples (d√©monstrations) de la t√¢che √† accomplir. Le mod√®le apprend alors le format et le raisonnement √† partir de ces exemples pour traiter la nouvelle demande.", "example": "T√¢che: Extraire la couleur.\nTexte: \"La voiture est rouge.\"\nCouleur: Rouge\n\nTexte: \"L'herbe est d'un vert √©clatant.\"\nCouleur: Vert\n\nTexte: \"Le ciel est d'un bleu profond.\"\nCouleur:" },
            { "name": "Chain-of-Thought (CoT)", "subtitle": "D√©composer le raisonnement", "description": "Au lieu de demander une r√©ponse directe, cette technique encourage le mod√®le √† \"r√©fl√©chir √©tape par √©tape\". En explicitant son raisonnement, le mod√®le am√©liore consid√©rablement sa pr√©cision sur les probl√®mes complexes (logique, math√©matiques).", "example": "Q: Roger a 5 balles de tennis. Il en ach√®te 2 autres bo√Ætes de 3 balles chacune. Combien de balles a-t-il maintenant?\n\nA: R√©fl√©chissons √©tape par √©tape. Roger commence avec 5 balles. Il ach√®te 2 bo√Ætes, et chaque bo√Æte contient 3 balles. Donc, il ach√®te 2 * 3 = 6 balles. Au total, il a maintenant 5 + 6 = 11 balles. La r√©ponse est 11." },
            { "name": "R√¥le Prompting (Persona)", "subtitle": "Assigner un r√¥le √† l'IA", "description": "Cette technique consiste √† donner un r√¥le ou une personnalit√© √† l'IA au d√©but du prompt. Par exemple, \"Agis comme un expert en cybers√©curit√©\". Cela oriente le ton, le style, et la base de connaissances que le mod√®le utilisera.", "example": "Agis comme un chef cuisinier italien. Propose-moi une recette simple et authentique de p√¢tes √† la carbonara pour deux personnes, en insistant sur les erreurs √† ne pas commettre."}
        ],
        systemPrompts: [
            { "name": "NotebookLM", "provider": "Google", "icon": "üìö", "mission": "√ätre un expert serviable qui r√©pond aux requ√™tes en se basant exclusivement sur les sources fournies par l'utilisateur.", "constraints": "Citer toutes les informations avec la notation [i]. Ne pas utiliser d'informations externes sans le signaler explicitement.", "behavior": "Analytique, bas√© sur les sources, factuel." },
            { "name": "DALL-E (via GPT-4o)", "provider": "OpenAI", "icon": "üé®", "mission": "G√©n√©rer des images √† partir de descriptions textuelles tr√®s d√©taill√©es.", "constraints": "Ne pas cr√©er d'images dans le style d'artistes post-1912. Ne pas nommer de personnages sous copyright.", "behavior": "Cr√©atif, visuel, tr√®s r√©glement√©." },
            { "name": "Claude 3.5 Sonnet", "provider": "Anthropic", "icon": "üìú", "mission": "√ätre un assistant IA serviable, honn√™te et inoffensif, cr√©√© par Anthropic.", "constraints": "Refuser les requ√™tes dangereuses, contraires √† l'√©thique ou ill√©gales. √âviter de donner des opinions personnelles.", "behavior": "Conversationnel, prudent, ax√© sur la s√©curit√©." },
            { "name": "GitHub Copilot", "provider": "Microsoft", "icon": "üíª", "mission": "Agir comme un expert en programmation IA et un assistant de codage.", "constraints": "Se concentrer sur le code et les sujets li√©s au d√©veloppement. Adh√©rer aux meilleures pratiques de codage.", "behavior": "Technique, orient√© code, collaboratif." }
        ],
        
        // State for Reference sections
        activeTechnique: 0,
        activeModel: 0,

        // Explorer state
        selectedPrompt: {},
        searchTerm: '',
        categoryFilter: 'all',
        techniqueFilter: 'all',
        copyMessage: 'Copier',
        
        // Idea generator state
        ideaTopic: '',
        ideaResults: [],

        // Builder state
        builder: {
            persona: '',
            task: '',
            context: '',
            format: '',
            fewShots: [],
            activeTab: 'test', // 'test' or 'improvement'
            testResponse: '',
            improvementResponse: '',
            apiError: '',
        },
        shareMessage: 'Partager',

        // Chart.js instance
        chartInstance: null,

        // Computed properties
        get uniqueCategories() { 
            return [...new Set(this.prompts.map(p => p.category))]; 
        },
        get uniqueTechniques() { 
            const all = this.prompts.flatMap(p => p.techniques); 
            return [...new Set(all)]; 
        },

        filteredPrompts() {
            if (!this.prompts) return [];
            return this.prompts.filter(p => {
                const searchMatch = this.searchTerm === '' || 
                    p.title.toLowerCase().includes(this.searchTerm.toLowerCase()) || 
                    p.objective.toLowerCase().includes(this.searchTerm.toLowerCase()) || 
                    p.text.toLowerCase().includes(this.searchTerm.toLowerCase());
                const categoryMatch = this.categoryFilter === 'all' || p.category === this.categoryFilter;
                const techniqueMatch = this.techniqueFilter === 'all' || p.techniques.includes(this.techniqueFilter);
                return searchMatch && categoryMatch && techniqueMatch;
            });
        },

        // Methods
        openModal(prompt) { 
            this.selectedPrompt = prompt; 
            this.isModalOpen = true; 
            this.resetCopyMessage(); 
        },

        copyToClipboard(text) { 
            navigator.clipboard.writeText(text).then(() => { 
                this.copyMessage = 'Copi√© !'; 
                setTimeout(() => this.resetCopyMessage(), 2000); 
            }); 
        },
        
        resetCopyMessage() { 
            this.copyMessage = 'Copier'; 
        },

        editInBuilder(prompt) {
            this.builder.task = prompt.text;
            this.builder.persona = '';
            this.builder.context = '';
            this.builder.fewShots = [];
            this.builder.format = '';
            
            if (prompt.text.toLowerCase().startsWith('agis comme')) {
                const parts = prompt.text.split('.');
                this.builder.persona = parts[0] + '.';
                this.builder.task = parts.slice(1).join('.').trim();
            }
            
            this.isModalOpen = false;
            this.activeSection = 'builder';
        },

        addFewShot() { 
            this.builder.fewShots.push({ input: '', output: '' }); 
        },

        removeFewShot(index) { 
            this.builder.fewShots.splice(index, 1); 
        },

        generateBuilderPrompt() {
            let finalPrompt = '';
            if (this.builder.persona.trim()) finalPrompt += `${this.builder.persona.trim()}\n\n`;
            if (this.builder.task.trim()) finalPrompt += `${this.builder.task.trim()}\n\n`;
            if (this.builder.context.trim()) finalPrompt += `Voici quelques informations de contexte pour t'aider :\n"""\n${this.builder.context.trim()}\n"""\n\n`;
            const validShots = this.builder.fewShots.filter(shot => shot.input.trim() && shot.output.trim());
            if (validShots.length > 0) {
                finalPrompt += "Voici quelques exemples pour te guider :\n";
                validShots.forEach(shot => {
                    finalPrompt += `Entr√©e: "${shot.input.trim()}"\nSortie: "${shot.output.trim()}"\n`;
                });
                finalPrompt += "\n";
            }
            if (this.builder.format) finalPrompt += `La r√©ponse doit √™tre format√©e comme ${this.builder.format}.`;
            return finalPrompt.trim() || 'Remplissez les champs pour g√©n√©rer un prompt...';
        },

        shareBuilderPrompt() {
            const dataToShare = {
                p: this.builder.persona,
                t: this.builder.task,
                c: this.builder.context,
                f: this.builder.format,
                s: this.builder.fewShots.filter(shot => shot.input && shot.output)
            };
            const jsonString = JSON.stringify(dataToShare);
            const encodedData = btoa(jsonString);
            const url = new URL(window.location.href);
            url.searchParams.set('prompt', encodedData);
            
            navigator.clipboard.writeText(url.toString()).then(() => {
                this.shareMessage = 'Copi√© !';
                setTimeout(() => { this.shareMessage = 'Partager'; }, 2000);
            });
        },
        
        async callGemini(prompt, isJson = false) {
            this.isLoading = true;
            this.apiError = '';
            this.builder.apiError = '';
            
            const apiKey = ""; // IMPORTANT: Replace with a secure method in a real application
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
            
            const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

            if (isJson) {
                payload.generationConfig = {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "title": { "type": "STRING" }, "objective": { "type": "STRING" } },
                            required: ["title", "objective"]
                        }
                    }
                };
            }

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) throw new Error(`Erreur de l'API: ${response.statusText}`);
                const result = await response.json();
                if (result.candidates && result.candidates.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    throw new Error("Aucune r√©ponse valide re√ßue de l'API.");
                }
            } catch (error) {
                const errorMessage = `Une erreur est survenue: ${error.message}. Assurez-vous d'avoir configur√© une cl√© API valide.`;
                this.apiError = errorMessage;
                this.builder.apiError = errorMessage;
                return null;
            } finally {
                this.isLoading = false;
            }
        },

        async generateIdeas() {
            if (!this.ideaTopic.trim()) return;
            this.ideaResults = [];
            const prompt = `Agis comme un expert en prompt engineering. G√©n√®re 5 id√©es de prompts cr√©atifs et utiles sur le sujet suivant : "${this.ideaTopic}". Pour chaque id√©e, fournis un titre et un objectif clair.`;
            const result = await this.callGemini(prompt, true);
            if (result) {
                try {
                    this.ideaResults = JSON.parse(result);
                } catch(e) {
                    this.apiError = "Erreur lors de l'analyse de la r√©ponse JSON.";
                }
            }
        },

        async testBuilderPrompt() {
            const prompt = this.generateBuilderPrompt();
            if (prompt === 'Remplissez les champs pour g√©n√©rer un prompt...') return;
            this.builder.testResponse = '';
            this.builder.improvementResponse = '';
            this.builder.apiError = '';
            this.builder.activeTab = 'test';
            const result = await this.callGemini(prompt);
            if (result) this.builder.testResponse = result;
        },

        async optimizePrompt() {
            const originalPrompt = this.generateBuilderPrompt();
            if (originalPrompt === 'Remplissez les champs pour g√©n√©rer un prompt...') return;
            this.builder.testResponse = '';
            this.builder.improvementResponse = '';
            this.builder.apiError = '';
            this.builder.activeTab = 'improvement';
            const metaPrompt = `Agis comme un expert en prompt engineering. Analyse le prompt suivant et propose une version am√©lior√©e pour obtenir des r√©sultats plus pr√©cis et de meilleure qualit√©. Explique bri√®vement les changements que tu as faits sous la forme "### Am√©liorations". Le prompt √† am√©liorer est :\n\n---\n\n${originalPrompt}`;
            const result = await this.callGemini(metaPrompt);
            if (result) {
                this.builder.improvementResponse = result
                    .replace(/### (.*)/g, '<strong class="text-indigo-600">$1</strong>')
                    .replace(/\n/g, '<br>');
            }
        },

        initChart() {
            if (this.chartInstance) this.chartInstance.destroy();
            const ctx = document.getElementById('categoryChart').getContext('2d');
            if (!ctx) return;
            const categoryCounts = this.prompts.reduce((acc, p) => ({...acc, [p.category]:(acc[p.category]||0)+1}), {});
            this.chartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(categoryCounts),
                    datasets: [{
                        label: 'Nombre de prompts',
                        data: Object.values(categoryCounts),
                        backgroundColor: 'rgba(79, 70, 229, 0.6)',
                        borderColor: 'rgba(79, 70, 229, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } }, x: { ticks: { autoSkip: false, maxRotation: 45, minRotation: 45 } } },
                    plugins: { legend: { display: false }, tooltip: { callbacks: { label: (c) => ` ${c.dataset.label}: ${c.raw}` } } }
                }
            });
        },

        init() {
            // 1. Load builder state from localStorage
            const savedBuilder = localStorage.getItem('promptBuilderState');
            if (savedBuilder) {
                Object.assign(this.builder, JSON.parse(savedBuilder));
            }

            // 2. Watch for changes in builder state to save to localStorage
            this.$watch('builder', (newValue) => {
                localStorage.setItem('promptBuilderState', JSON.stringify(newValue));
            }, { deep: true });

            // 3. Check for shared prompt in URL
            const urlParams = new URLSearchParams(window.location.search);
            const sharedPromptData = urlParams.get('prompt');
            if (sharedPromptData) {
                try {
                    const decodedData = atob(sharedPromptData);
                    const parsedData = JSON.parse(decodedData);
                    this.builder.persona = parsedData.p || '';
                    this.builder.task = parsedData.t || '';
                    this.builder.context = parsedData.c || '';
                    this.builder.format = parsedData.f || '';
                    this.builder.fewShots = parsedData.s || [];
                    this.activeSection = 'builder';
                    window.history.replaceState({}, document.title, window.location.pathname);
                } catch (e) {
                    console.error("Erreur d'analyse des donn√©es partag√©es:", e);
                }
            }

            // 4. Watch for section changes to initialize/update the chart
            this.$watch('activeSection', (value) => {
                if (value === 'architectures') {
                    this.$nextTick(() => this.initChart());
                }
            });
            
            // 5. Initial chart load if starting on the right section
            if (this.activeSection === 'architectures') {
                 this.$nextTick(() => this.initChart());
            }
        }
    }
}
